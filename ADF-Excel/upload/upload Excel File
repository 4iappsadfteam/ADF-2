package com.adfwebservices.view.backing;


import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;


import java.io.OutputStream;

import java.text.DateFormat;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.faces.event.ValueChangeEvent;


import oracle.adf.model.BindingContext;
import oracle.adf.model.OperationBinding;
import oracle.adf.model.binding.DCIteratorBinding;
import oracle.adf.view.rich.component.rich.data.RichTable;
import oracle.adf.view.rich.component.rich.input.RichInputFile;


import oracle.adf.view.rich.component.rich.layout.RichToolbar;
import oracle.adf.view.rich.component.rich.nav.RichCommandButton;
import oracle.adf.view.rich.component.rich.output.RichPanelCollection;
import oracle.adf.view.rich.context.AdfFacesContext;


import oracle.binding.BindingContainer;

import oracle.jbo.uicli.binding.JUCtrlHierBinding;

import org.apache.myfaces.trinidad.model.CollectionModel;
import org.apache.myfaces.trinidad.model.UploadedFile;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.WorkbookFactory;

public class Page1 {
    private RichTable t1;
    private RichPanelCollection pc1;
    private RichToolbar t2;
    private RichInputFile if1;
    private RichCommandButton cb1;
    private RichCommandButton cb2;
    private RichCommandButton cb3;

    public void setT1(RichTable t1) {
        this.t1 = t1;
    }

    public RichTable getT1() {
        return t1;
    }

    public void setPc1(RichPanelCollection pc1) {
        this.pc1 = pc1;
    }

    public RichPanelCollection getPc1() {
        return pc1;
    }

    public void setT2(RichToolbar t2) {
        this.t2 = t2;
    }

    public RichToolbar getT2() {
        return t2;
    }

    public void setIf1(RichInputFile if1) {
        this.if1 = if1;
    }

    public RichInputFile getIf1() {
        return if1;
    }
    
    
    public void setCb1(RichCommandButton cb1) {
        this.cb1 = cb1;
    }

    public RichCommandButton getCb1() {
        return cb1;
    }

    public void setCb2(RichCommandButton cb2) {
        this.cb2 = cb2;
    }

    public RichCommandButton getCb2() {
        return cb2;
    }

    public void onClickUpload(ValueChangeEvent valueChangeEvent) throws InvalidFormatException,
                                                                        ParseException {
        valueChangeEvent.getComponent().processUpdates(FacesContext.getCurrentInstance());
        UploadedFile file = (UploadedFile)valueChangeEvent.getNewValue();


        try {
            //Check if file is XLSX- King Soft
            if (file.getContentType().equalsIgnoreCase("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") ||
                file.getContentType().equalsIgnoreCase("application/xlsx") ||
                file.getContentType().equalsIgnoreCase("application/kset")) {
                System.out.println("Inside XLSX loop");
                readNProcessExcelx(file.getInputStream()); //for xlsx

            }
            //            Check if file is XLS- MS-Excel
            else if (file.getContentType().equalsIgnoreCase("application/vnd.ms-excel")) {

                if (file.getFilename().toUpperCase().endsWith(".XLS")) {
                    System.out.println("Inside XLS loop");
                    readNProcessExcel(file.getInputStream()); //for xls
                }
                //        No Excel
            } else {
                System.out.println("Inside else loop");
                FacesMessage msg = new FacesMessage("File format not supported.-- Upload XLS or XLSX file");
                msg.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext.getCurrentInstance().addMessage(null, msg);
            }
            AdfFacesContext.getCurrentInstance().addPartialTarget(t1);

        } catch (IOException e) {
            System.out.println("IO Exception");
        }
    }

    public void readNProcessExcelx(InputStream xlsx) throws IOException,
                                                            InvalidFormatException,
                                                            ParseException {

        CollectionModel cModel = (CollectionModel)t1.getValue();

        JUCtrlHierBinding tableBinding = (JUCtrlHierBinding)cModel.getWrappedData();
        //Acess the ADF iterator binding that is used with ADF table binding
        DCIteratorBinding iter = tableBinding.getDCIteratorBinding();

        //Use XSSFWorkbook for XLS file
        //XSSFWorkbook WorkBook = null;
        org.apache.poi.ss.usermodel.Workbook workbook = null;
        int sheetIndex = 0;

        try {
            //WorkBook = new XSSFWorkbook(xlsx);
            workbook = WorkbookFactory.create(xlsx);
        } catch (IOException e) {

        }
        //XSSFSheet sheet = WorkBook.getSheetAt(sheetIndex);
        org.apache.poi.ss.usermodel.Sheet sheet =
            workbook.getSheetAt(sheetIndex);

        Integer skipRw = 1;
        Integer skipcnt = 1;

        //Iterate over excel rows
        for (Row tempRow : sheet) {
            System.out.println("Inside for loop");
            if (skipcnt > skipRw) { //skip first n row for labels.
                //Create new row in table

                executeOperation("CreateInsert").execute();
                System.out.println("New row created in table");
                //Get current row from iterator
                oracle.jbo.Row row =
                    iter.getNavigatableRowIterator().getCurrentRow();
                System.out.println("Got current row...");
                int Index = 0;
                //Iterate over row's columns
                for (int column = 0; column < tempRow.getPhysicalNumberOfCells(); column++) {

                    Cell MytempCell = tempRow.getCell(column);
                    if (MytempCell != null) {
                        Index = MytempCell.getColumnIndex();
                    } else {
                        Index++;
                    }
                    if (Index == 0) {
                        System.out.println("Index 1 " +
                                           MytempCell.getStringCellValue());
                        row.setAttribute("FirstName",
                                         MytempCell.getStringCellValue());

                    } else if (Index == 1) {
                        System.out.println("Index 2 " +
                                           MytempCell.getStringCellValue());
                        row.setAttribute("LastName",
                                         MytempCell.getStringCellValue());

                    } else if (Index == 2) {
                        System.out.println("Index 3 " +
                                           MytempCell.getStringCellValue());
                        row.setAttribute("Email",
                                         MytempCell.getStringCellValue());

                    } else if (Index == 3) {
                        System.out.println("Index 4 " +
                                           MytempCell.getNumericCellValue());
                        row.setAttribute("PhoneNumber",
                                         MytempCell.getNumericCellValue());

                    } else if (Index == 4) {
                        java.util.Date date = MytempCell.getDateCellValue();
                        DateFormat dateFormat =
                            new SimpleDateFormat("MM/dd/yyyy");
                        String date1 = dateFormat.format(date);

                        try {
                            date = dateFormat.parse(date1);
                        } catch (ParseException e) {
                        }
                        java.sql.Date sqlDate =
                            new java.sql.Date(date.getTime());
                        oracle.jbo.domain.Date jboDate =
                            new oracle.jbo.domain.Date(sqlDate);
                        row.setAttribute("HireDate", jboDate);
                    } else if (Index == 5) {
                        System.out.println("Index 6 " +MytempCell.getStringCellValue());
                        row.setAttribute("JobId", MytempCell.getStringCellValue());
                    } else if (Index == 6) {
                        System.out.println("Index 7 " +
                                           MytempCell.getNumericCellValue());
                        row.setAttribute("Salary",
                                         MytempCell.getNumericCellValue());
                    } else if (Index == 7) {
                        System.out.println("Index 8 " +
                                           MytempCell.getNumericCellValue());
                        row.setAttribute("CommissionPct",
                                         MytempCell.getNumericCellValue());
                    } else if (Index == 8) {
                        System.out.println("Index 9 " +
                                           MytempCell.getNumericCellValue());
                        row.setAttribute("ManagerId",
                                         MytempCell.getNumericCellValue());
                    } else if (Index == 9) {
                        System.out.println("Index 10 " +
                                           MytempCell.getNumericCellValue());
                        row.setAttribute("DepartmentId",
                                         MytempCell.getNumericCellValue());
                    }
                }
                executeOperation("Commit").execute();
                System.out.println("Commit success!!!!!");
            }
            skipcnt++;
        }
    }

    public void readNProcessExcel(InputStream xls) throws IOException {

        CollectionModel cModel = (CollectionModel)t1.getValue();
        JUCtrlHierBinding tableBinding =
            (JUCtrlHierBinding)cModel.getWrappedData();
        DCIteratorBinding iter = tableBinding.getDCIteratorBinding();

        //Use HSSFWorkbook for XLS file
        HSSFWorkbook WorkBook = null;

        int sheetIndex = 0;

        try {
            WorkBook = new HSSFWorkbook(xls);
        } catch (IOException e) {
            System.out.println("Exception : " + e);
        }

        HSSFSheet sheet = WorkBook.getSheetAt(sheetIndex);

        Integer skipRw = 1;
        Integer skipcnt = 1;
        Integer sno = 1;

        //Iterate over excel rows
        for (Row tempRow : sheet) {
            System.out.println(skipcnt + "--" + skipRw);
            if (skipcnt > skipRw) { //skip first n row for labels.
                //Create new row in table
                executeOperation("CreateInsert").execute();
                //Get current row from iterator
                oracle.jbo.Row row =
                    iter.getNavigatableRowIterator().getCurrentRow();

                int Index = 0;
                //Iterate over row's columns
                for (int column = 0;
                     column < tempRow.getPhysicalNumberOfCells(); column++) {
                    Cell MytempCell = tempRow.getCell(column);
                    if (MytempCell != null) {
                        Index = MytempCell.getColumnIndex();
                    } else {
                        Index++;
                    }
                   
                    if (Index == 0) {
                        System.out.println("Index 1 " + MytempCell.getStringCellValue());
                        row.setAttribute("FirstName", MytempCell.getStringCellValue());

                    } else if (Index == 1) {
                        System.out.println("Index 2 " + MytempCell.getStringCellValue());
                        row.setAttribute("LastName", MytempCell.getStringCellValue());

                    } else if (Index == 2) {
                        System.out.println("Index 3 " + MytempCell.getStringCellValue());
                        row.setAttribute("Email", MytempCell.getStringCellValue());

                    } else if (Index == 3) {
                        System.out.println("Index 4 " + MytempCell.getNumericCellValue());
                        row.setAttribute("PhoneNumber", MytempCell.getNumericCellValue());

                    } else if (Index == 4) {
                        java.util.Date date = MytempCell.getDateCellValue();
                        DateFormat dateFormat =
                            new SimpleDateFormat("MM/dd/yyyy");
                        String date1 = dateFormat.format(date);

                        try {
                            date = dateFormat.parse(date1);
                        } catch (ParseException e) {
                        }
                        java.sql.Date sqlDate =
                            new java.sql.Date(date.getTime());
                        oracle.jbo.domain.Date jboDate =
                            new oracle.jbo.domain.Date(sqlDate);
                        row.setAttribute("HireDate", jboDate);
                    } else if (Index == 5) {
                        System.out.println("Index 6 " +MytempCell.getStringCellValue());
                        row.setAttribute("JobId", MytempCell.getStringCellValue());
                    } else if (Index == 6) {
                        System.out.println("Index 7 " + MytempCell.getNumericCellValue());
                        row.setAttribute("Salary", MytempCell.getNumericCellValue());
                    } else if (Index == 7) {
                        System.out.println("Index 8 " + MytempCell.getNumericCellValue());
                        row.setAttribute("CommissionPct", MytempCell.getNumericCellValue());
                    } else if (Index == 8) {
                        System.out.println("Index 9 " + MytempCell.getNumericCellValue());
                        row.setAttribute("ManagerId", MytempCell.getNumericCellValue());
                    } else if (Index == 9) {
                        System.out.println("Index 10 " + MytempCell.getNumericCellValue());
                        row.setAttribute("DepartmentId",MytempCell.getNumericCellValue());
                    }
                    
                }
                sno++;
            }
            skipcnt++;
        }
        //Execute table viewObject
        executeOperation("Execute").execute();
    }


    public OperationBinding executeOperation(String operation) {
        BindingContainer bindings =
            BindingContext.getCurrent().getCurrentBindingsEntry();
        OperationBinding operationBinding =
            (OperationBinding)ADFUtils.findOperation(operation);
        return operationBinding;
    }
    
    
    
    /*
     *                     if (Index == 0) {
                        System.out.println("Index 0 " +
                                           MytempCell.getStringCellValue());
                        row.setAttribute("EmpId",
                                         MytempCell.getNumericCellValue());

                    } else if (Index == 1) {
                        System.out.println("Index 1 " +
                                           MytempCell.getStringCellValue());
                        row.setAttribute("EmpName",
                                         MytempCell.getStringCellValue());

                    } else if (Index == 2) {
                        System.out.println("Index 2 " +
                                           MytempCell.getStringCellValue());
                        row.setAttribute("JobType",
                                         MytempCell.getStringCellValue());

                    } else if (Index == 3) {
                        System.out.println("Index 3 " +
                                           MytempCell.getStringCellValue());
                        row.setAttribute("Salary",
                                         MytempCell.getNumericCellValue());

                    } else if (Index == 4) {
                        System.out.println("Index 4 " +
                                           MytempCell.getStringCellValue());
                        row.setAttribute("Experience",
                                         MytempCell.getNumericCellValue());
                    }
     *
     * */

    /**********downloadFile**************

    public void downloadFile(FacesContext facesContext,
                             OutputStream outputStream) throws IOException {
        File filed = new File("E:\\Test_download.xlsx");
        //File filed = new File("UploadPartsRequestTemplate.xlsx");\\..\\..\\..\\mosm\\
        FileInputStream fis;
        byte[] b;
        try {
            fis = new FileInputStream(filed);

            int n;
            while ((n = fis.available()) > 0) {
                b = new byte[n];
                int result = fis.read(b);
                outputStream.write(b, 0, b.length);
                if (result == -1)
                    break;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        outputStream.flush();
    }

     ***********************************************/
    public void downloadFile(ActionEvent actionEvent) {
        // Add event code here...
    }

    public void setCb3(RichCommandButton cb3) {
        this.cb3 = cb3;
    }

    public RichCommandButton getCb3() {
        return cb3;
    }

    public void TemplateDownlaod(FacesContext facesContext,
                                 OutputStream outputStream) throws IOException {
        File filed = new File("E:\\Test_download.xlsx");
        //File filed = new File("UploadPartsRequestTemplate.xlsx");\\..\\..\\..\\mosm\\
        FileInputStream fis;
        byte[] b;
        try {
            fis = new FileInputStream(filed);

            int n;
            while ((n = fis.available()) > 0) {
                b = new byte[n];
                int result = fis.read(b);
                outputStream.write(b, 0, b.length);
                if (result == -1)
                    break;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        outputStream.flush();
    }
}
